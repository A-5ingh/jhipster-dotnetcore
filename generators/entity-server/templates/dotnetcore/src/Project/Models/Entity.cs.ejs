<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%
let importJsonIgnore = false;
let hasManyToMany = false;
let entityTableName = _.snakeCase(entityClass);
let entityClassName = asEntity(entityClass);
let entityVariableName = _.camelCase(entityClass); %>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<%  let idx = 0;
    while (idx < relationships.length && !hasManyToMany){
        if(relationships[idx] === 'many-to-many'){
            hasManyToMany = true;
        }
        idx++;
    }
    if (hasManyToMany) { %>
using JHipsterNetSampleApplication.Models.RelationshipTools;
<% } if (importJsonIgnore === true || hasManyToMany) { %>
using Newtonsoft.Json;
<% } %>

namespace .Models {
    [Table("<%= entityTableName %>")]
    public class <%= entityClassName %> {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public long Id { get; set; }

        <%# Parcours de tous les attributs %>
        <% for (idx in fields){
            let required = false;
            const fieldValidate = fields[idx].fieldValidate;
            const fieldValidateRules = fields[idx].fieldValidateRules;
            const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
            const fieldType = fields[idx].fieldType;
            const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            const fieldName = fields[idx].fieldName;
            const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
            const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
            if (fieldValidate === true) {
                if (fieldValidateRules.includes('required')) {
                    required = true;
                }
            }
            if (required) { %>
        [Required]
            <% }
        }

        for (idx in relationships) {
            const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
            const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
            const relationshipName = relationships[idx].relationshipName;
            const relationshipFieldName = relationships[idx].relationshipFieldName;
            const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
            const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
            const relationshipType = relationships[idx].relationshipType;
            const relationshipValidate = relationships[idx].relationshipValidate;
            const relationshipRequired = relationships[idx].relationshipRequired;
            const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
            const ownerSide = relationships[idx].ownerSide;
            const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        } %>
        // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
        <% for (idx in fields) {
            const fieldType = fields[idx].fieldType;
            const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            const fieldName = fields[idx].fieldName;
            const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod; %>
        public <%= fieldType %> <%= fieldName %> { get; set; };
        <%_ } _%>

        <% if (hasManyToMany) { %>
            public <%= entityClassName %>()
            {
                <%# Récupérer le champ sur lequel s'applique la many to many %>
                <% for (idx in relationshipq) {
                    const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
                    const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;

                } %>

                Operations = new JoinListFacade<Operation, <%= entityClassName %>, OperationLabel>(this, OperationLabels);
            }
        <% } %>

        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if (obj == null || GetType() != obj.GetType()) return false;
            var <%= entityVariableName %> = obj as <%= entityClassName %>;
            if (<%= entityVariableName %>?.Id == null || <%= entityVariableName %>?.Id == 0 || Id == 0) return false;
            return EqualityComparer<long>.Default.Equals(Id, <%= entityVariableName %>.Id);
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Id);
        }

        public override string ToString()
        {
            return "<%= entityClassName %>{" +
            $"ID='{Id}'" +
            <%# Affichage de tous les attributs sauf les relations %>
            <% for (idx in fields) {
                const fieldName = fields[idx].fieldName;
            %>
                $", <%= fieldName %>='{<%= fieldName %>}'" +
            <% } %>
            "}";
        }
    }
}
