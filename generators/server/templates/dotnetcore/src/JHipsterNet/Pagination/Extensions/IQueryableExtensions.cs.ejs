<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using JHipsterNet.Pagination.Binders;

namespace JHipsterNet.Pagination.Extensions {
    public static class QueryableExtensions {
        public static IPage<TEntity> UsePageable<TEntity>(this IQueryable<TEntity> query, IPageable pageable)
            where TEntity : class
        {
            var entities = query.ApplySort(pageable.Sort).Skip(pageable.Offset).Take(Math.Min(pageable.PageSize, PageableBinderConfig.DefaultMaxPageSize));
            return new Page<TEntity>(entities.ToList(), pageable, query.Count());
        }

        private static IQueryable<TEntity> ApplySort<TEntity>(this IQueryable<TEntity> query, Sort sort)
        {
            if (!query.Any() || sort == null || sort.IsUnsorted()) return query;

            var sortExpressions = new SortExpressions<TEntity>();
            var propertyInfos = typeof(TEntity).GetProperties(BindingFlags.Public | BindingFlags.Instance);

            IList<Order> orders = sort.Orders;
            foreach (var order in orders)
            {
                if (order == null || order.Property == null) continue;
                bool isDescending = order.Direction.IsDescending();

                var objectProperty = propertyInfos.FirstOrDefault(pi => pi.Name.Equals(order.Property, StringComparison.InvariantCultureIgnoreCase));

                if (objectProperty == null) continue;

                var type = typeof(TEntity);
                var parameter = Expression.Parameter(type, "p");

                var property = type.GetProperty(objectProperty.Name);
                var propertyAccess = Expression.MakeMemberAccess(parameter, property);

                var expressionFunc = Expression.Lambda<Func<TEntity, object>>(propertyAccess, parameter);

                sortExpressions.Add(expressionFunc, isDescending);
            }
            return SortExpressions<TEntity>.ApplySorts(query, sortExpressions);
        }
    }
}
